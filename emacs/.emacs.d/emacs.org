#+title: GNU Emacs configuration
#+author: Laurent Stacul
#+email: laurent.stacul@gmail.com
#+language: en

* My Emacs Configuration
** Default Theme

I like the modus theme that comes with GNU emacs. I start with the
light theme knowing I can easily change the the dark theme with the
command =M-x modus-themes-toggle=.

#+begin_src emacs-lisp :tangle "init.el"
  (load-theme 'modus-operandi t)
#+end_src

** Turn Off The Bell

I need silence when I work and the bell sound makes me nervous.

#+begin_src emacs-lisp :tangle "init.el"
  (setq ring-bell-function 'ignore)
  (setq visible-bell t)
#+end_src

** Remove All GUI Widgets

When I start emacs, I want it with the minimal view (no buttons, no
scroll bars, no tooltips) and I want the first show the Lisp scratch
buffer.

#+begin_src emacs-lisp :tangle "init.el"
  (setq inhibit-splash-screen t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (if (display-graphic-p) (scroll-bar-mode -1))
  (setq use-dialog-box nil)
#+end_src

** Do not create lock and backup files

Most of the time, my files are in project managed with git. So, backup
files are generally useless. And regarding lock files, I generally
know what I do when using external programs.

#+begin_src emacs-lisp :tangle "init.el"
(setq make-backup-files nil)
(setq backup-inhibited nil)
(setq create-lockfiles nil)
#+end_src

** Display Configuration For MacBook

With high definition screens (work computer), the letters are too
small so I increase the size when on MacOS computer.

#+begin_src emacs-lisp :tangle "init.el"
  (when (eq system-type 'darwin)
    (set-face-attribute 'default nil :height 165))
#+end_src

** Package System Configuration

I add melpa and melpa-stable to the package repositories.

#+begin_src emacs-lisp :tangle "init.el"
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
               '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src

In case, I install my configuration on a new machine, I update the
package index.

#+begin_src emacs-lisp :tangle "init.el"
  (unless package-archive-contents (package-refresh-contents))
#+end_src

In case some packages are missing, Emacs will propose me to install
them. On a new installation, all the packages will hence be installed.

#+begin_src emacs-lisp :tangle "init.el"
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Improve Dabbrev Experience

By default, Dabbrev will only complete a started word with what is
already written in the current buffer. With Hippie, the feature is
extended to complete with file path, other buffers.

#+begin_src emacs-lisp :tangle "init.el"
  (global-set-key [remap dabbrev-expand] 'hippie-expand)
#+end_src

** Display Cursor Column Number

The minor mode =column-number-mode= will display the current column of
the cursor next to the line number in the mode line.

#+begin_src emacs-lisp :tangle "init.el"
  (setq column-number-mode t)
#+end_src

** Add Newline Character At End Of File

To avoid the terminal prompt to be moved right after the output a ~cat
file~ where =file= does not end with a newline character, it is a good
practice to impose your editor to always add that character on save
when needed.

#+begin_src emacs-lisp :tangle "init.el"
  (setq require-final-newline t)
#+end_src

** Show Trailing Whitespace

It is generally prettier to not have trailing white space in source
code. With the following setting, such trailing white spaces will be
visible. A simple way to remove them is to run the
=M-x delete-trailing-whitespace= command.

#+begin_src emacs-lisp :tangle "init.el"
  (add-hook 'prog-mode-hook (lambda() (setq show-trailing-whitespace t)))
  (add-hook 'text-mode-hook (lambda() (setq show-trailing-whitespace t)))
#+end_src

** Current Line Highlighting

When editing text or source code, we can have the current line
highlighted. But this is not useful in other buffers like the shell or
dired. The following only enable this mode when editing text and
source code.

There is a special =conf-mode= that is neither text or programming
mode. I enable this in all those derived modes.

#+begin_src emacs-lisp :tangle "init.el"
  (add-hook 'text-mode-hook #'hl-line-mode)
  (add-hook 'prog-mode-hook #'hl-line-mode)
  (add-hook 'conf-mode-hook #'hl-line-mode)
#+end_src

** Line Number

When programming, I need the line number to be displayed so that I
immediately see which line fails when something crash.

#+begin_src emacs-lisp :tangle "init.el"
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Never Indent With Tabs

I really dislike indentation with tabs. This will not change the
behavior when editing file that require indentation to be a TAB (like
=Makefile= by default).

#+begin_src emacs-lisp :tangle "init.el"
  (setq-default indent-tabs-mode nil)
#+end_src

** Stop using ~custom-file~

When we install a package via the package manager or we use =M-x
customize=, emacs writes things at the end of the emacs
configuration. We move such things in a temporary file because I don't
want to commit generated code.

#+begin_src emacs-lisp :tangle "init.el"
  (setq custom-file (make-temp-file "emacs-custom-"))
#+end_src

** History

To have the most recent file visited first, we can activate the
=savehist-mode=.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Save history
  (use-package savehist
    :init
    (setq history-length 25)
    (savehist-mode))
#+end_src

We can even keep track of the position of the cursor in each visited
files with =save-place-mode=.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Remember the last place in a visited file
  (use-package saveplace
    :init
    (save-place-mode))
#+end_src

** Automatic Buffer Update

By default, when a file is changed from outside of emacs, it is not
reflected inside the buffer: we need to manually use =M-x
revert-buffer=. But, this can be automated with the following.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Refresh buffer when underlying file has changed
  (global-auto-revert-mode 1)
#+end_src

The same behaviour can be enabled for non-file buffers. For instance,
when we have a =Dired= buffer and we created a new file from outside,
the buffer does not display the created file. To automatically update
the buffer, we can set the following:

#+begin_src emacs-lisp :tangle "init.el"
  ;; Refresh other buffer if needed (for instance Dired buffers)
  (setq global-auto-revert-non-file-buffers t)
#+end_src

** Display The Current Time In The Mode Line

#+begin_src emacs-lisp :tangle "init.el"
  (use-package time
    :ensure nil
    :hook (after-init . display-time-mode)
    :config
    (setq display-time-interval 60)
    (setq display-time-default-load-average nil))
#+end_src

** Mode Line Configuration

#+begin_src emacs-lisp :tangle "init.el"
  (defun stac-mode-line-major-mode-name ()
    "Display the capitalized '-mode' truncated major mode."
    (capitalize (string-replace "-mode" "" (symbol-name major-mode))))

  (defvar stac-mode-line-major-mode
    '(:eval
      (concat "(" (stac-mode-line-major-mode-name) ")"))
    "My display of mode in the mode-line")

  (defvar stac-mode-line-misc-info
    '(:eval
      (when (mode-line-window-selected-p)
        mode-line-misc-info))
    "Only display misc info (like the current time) on the
  currently selected window.")

  (dolist (construct '(stac-mode-line-major-mode
                       stac-mode-line-misc-info))
    (put construct 'risky-local-variable t))

  (setq-default mode-line-format
        '("%e" mode-line-front-space
          (:propertize
           ("" mode-line-mule-info mode-line-client mode-line-modified mode-line-remote)
           display
           (min-width
            (5.0)))
          mode-line-frame-identification
          mode-line-buffer-identification
          "   "
          mode-line-position
          (vc-mode vc-mode)
          "  "
          stac-mode-line-major-mode
          " "

          stac-mode-line-misc-info
          mode-line-end-spaces))
#+end_src

** Project Tags Visiting

When a move from one project to another, I don't want to manually call
=M-x visit-tags-table=. The following snippet will do the job for me:

#+begin_src emacs-lisp :tangle "init.el"
  (use-package project
    :init
    (defun stac/project-tags ()
      "When in a project, visit the tags file at the root of the project."
      (interactive)
      (if (project-current)
          (let* ((proj-root (expand-file-name (project-root (project-current))))
                 (old-tags-file tags-file-name)
                 (new-tags-file (concat proj-root "TAGS")))
            (if (equal old-tags-file new-tags-file)
                (message "Tags file not changed: %s" old-tags-file)
              (visit-tags-table new-tags-file)
              (message "Tags file changed: %s -> %s" old-tags-file new-tags-file)))
        (message "No current project"))))
#+end_src

** Isearch Configuration

We display the number of matches and current match the cursor is on:
this will be displayed on the left of the =I-search= prompt.

When we search for a string, spaces are interpreted was catch-all so
that we have some kind of fuzzy search.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package isearch
    :ensure nil
    :demand t
    :config
    (setq search-whitespace-regexp ".*?"
          isearch-lazy-count t
          lazy-count-prefix-format "(%s/%s) "
          lazy-count-suffix-format nil))
#+end_src

** Xref

By default, =Xref= opens a new buffer when it can find several
definitions of the same symbol. With this configuration, I leverage
the minibuffer to make a choice.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package xref
    :ensure nil
    :commands (xref-find-definitions xref-go-back)
    :config
    (setq xref-show-definitions-function #'xref-show-definitions-completing-read))
#+end_src

** Speed Up Grep

The idea is to leverage =ripgrep= program if installed on the system.

=Xref= is already aware of the =rg= command to issue (see
=xref-search-program-alist=) so we simply have to set the variable
=xref-search-program= to the symbol ~'ripgrep~.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package grep
    :ensure nil
    :commands (grep lgrep rgrep)
    :config
    (let* ((executable (or (executable-find "rg") "grep"))
           (rgp (string-match-p "rg" executable)))
      (when rgp
        (setq grep-program executable)
        (setq grep-template "rg -nH --null -e <R> <F>")
        (setq xref-search-program 'ripgrep))))
#+end_src

** Dired Configuration

*** Move to Trash Instead of Removing a File

It is safer that removed files end up into the Trash bin than being
removed forever from the disk.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package dired
    :ensure nil
    :commands (dired)
    :config
    (setq delete-by-moving-to-trash t))
#+end_src

** Packages

*** Magit

This is a very good interface to git.

On MacOS, the git version provided by =Homebrew= seems slower
compared with the stock binary and, from time to times, some operation
are temporarily failing with messages like:

#+begin_quote
apply: Doing vfork: Permission denied
#+end_quote

Hence, there are two solutions:
- Use =git= provided by Xcode (uninstall with ~brew uninstall git~)
- Or, set the path to the =git= binary with =magit-git-executable= to
  =/usr/bin/git=

In any case, =Magit= is running faster with the default =git=.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package magit)
#+end_src

*** Minibuffer Improvements: Vertico & Marginalia

=Vertico= takes care of displaying choices in the minibuffer as a
vertical list.
=Marginalia= will append any lines displayed in =Vertico= with some
documentation.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package vertico
    :init
    (vertico-mode)
    (setq vertico-cycle t))

  (use-package marginalia
    :init
    (marginalia-mode))
#+end_src

*** Yasnippet

This package allows to insert some common snippets. For me, this is
only useful in programming modes.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package yasnippet
    :config
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    (yas-reload-all)
    :hook (prog-mode . yas-minor-mode))
#+end_src

*** Flycheck

#+begin_src emacs-lisp :tangle "init.el"
  (use-package flycheck
    :init (global-flycheck-mode)
    :config
    (setq flycheck-check-syntax-automatically '(save)))
#+end_src

*** Markdown

Nice display of Markdown files. When editing, as these files are
supposed to be readable from a basic editor, it is more readable to
make the line not too long: 80 characters is perfect.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package markdown-mode
    :config
    (add-hook 'markdown-mode-hook 'auto-fill-mode)
    (add-hook 'markdown-mode-hook (lambda() (set-fill-column 80))))
#+end_src

*** Ruby

**** =rbenv=

This package ensures we run the right ruby interpreter depending on
the project I am working on. For instance, if my project is defined to
work with =2.7.8=, I don't want =Flycheck= to try to run =rubocop=
which my not be installed with the system-wide ruby interpreter.

I don't need to see the current version in my modeline so I set
=rbenv-show-active-ruby-in-modeline= to =nil=.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package rbenv
    :config
    (setq rbenv-show-active-ruby-in-modeline nil)
    (global-rbenv-mode))
#+end_src

**** Automatic generation of the ~end~ keyword

It is quite convenient that emacs generate the ~end~ keyword on new
class, function or block.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package ruby-end)
#+end_src

*** Dockerfile

I only installed this package to have the syntax highlighting.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package dockerfile-mode)
#+end_src

*** YAML

Facilities to edit YAML files.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package yaml-mode)
#+end_src
